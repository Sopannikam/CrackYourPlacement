import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), 1, n, k);
        return result;
    }

    private void backtrack(List<List<Integer>> result, List<Integer> currentCombination, int start, int n, int k) {
        // If the combination is complete
        if (currentCombination.size() == k) {
            result.add(new ArrayList<>(currentCombination));
            return;
        }
        
        // Iterate over the range and add the next element
        for (int i = start; i <= n; i++) {
            currentCombination.add(i);
            backtrack(result, currentCombination, i + 1, n, k);
            currentCombination.remove(currentCombination.size() - 1); // Backtrack
        }
    }
}
