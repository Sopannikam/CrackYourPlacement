import java.util.Scanner;

class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }

    public static ListNode createList(int[] values, int pos) {
        if (values.length == 0) return null;

        ListNode head = new ListNode(values[0]);
        ListNode tail = head;
        ListNode cycleEntry = null;

        if (pos == 0) {
            cycleEntry = head;
        }

        for (int i = 1; i < values.length; i++) {
            tail.next = new ListNode(values[i]);
            tail = tail.next;

            if (i == pos) {
                cycleEntry = tail;
            }
        }

        if (cycleEntry != null) {
            tail.next = cycleEntry;
        }

        return head;
    }


    public static ListNode deserialize(String data) {
        if (data.equals("[]")) return null;
        
        String[] parts = data.substring(1, data.length() - 1).split(",");
        int[] values = new int[parts.length];
        
        for (int i = 0; i < parts.length; i++) {
            values[i] = Integer.parseInt(parts[i].trim());
        }
        
        return createList(values, -1);  
    }
}

class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null) return false;

        ListNode slow = head;
        ListNode fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast) {
                return true;
            }
        }

        return false;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the elements of the linked list separated by spaces:");
        String[] input = scanner.nextLine().split(" ");
        int[] values = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            values[i] = Integer.parseInt(input[i]);
        }

        System.out.println("Enter the position for the cycle (or -1 if there is no cycle):");
        int pos = scanner.nextInt();

        ListNode head = ListNode.createList(values, pos);

        Solution solution = new Solution();
        boolean result = solution.hasCycle(head);

   
        System.out.println("Does the linked list have a cycle? " + result);

        scanner.close();
    }
}
