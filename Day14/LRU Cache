import java.io.*;
import java.util.*;

class LRUCache {

    private class Node {
        int key;
        int value;
        Node prev;
        Node next;
        
        Node(int key, int value) {
            this.key = key;
            this.value = value;
        }
    }

    private final int capacity;
    private final Map<Integer, Node> cache;
    private final Node head;
    private final Node tail;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.cache = new HashMap<>(capacity);
        head = new Node(-1, -1); 
        tail = new Node(-1, -1); 
        head.next = tail;
        tail.prev = head;
    }

    public int get(int key) {
        if (cache.containsKey(key)) {
            Node node = cache.get(key);
            removeNode(node);
            addToHead(node);
            return node.value;
        } else {
            return -1;
        }
    }

    public void put(int key, int value) {
        if (cache.containsKey(key)) {
            Node node = cache.get(key);
            node.value = value;
            removeNode(node);
            addToHead(node);
        } else {
            if (cache.size() == capacity) {
                Node lru = tail.prev;
                removeNode(lru);
                cache.remove(lru.key);
            }
            Node newNode = new Node(key, value);
            cache.put(key, newNode);
            addToHead(newNode);
        }
    }

    private void addToHead(Node node) {
        node.next = head.next;
        node.prev = head;
        head.next.prev = node;
        head.next = node;
    }

    private void removeNode(Node node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        int capacity = Integer.parseInt(bufferedReader.readLine().trim());
        LRUCache lruCache = new LRUCache(capacity);
        
        String line;
        while ((line = bufferedReader.readLine()) != null && !line.isEmpty()) {
            String[] parts = line.split(" ");
            String command = parts[0];
            
            switch (command) {
                case "put":
                    int key = Integer.parseInt(parts[1]);
                    int value = Integer.parseInt(parts[2]);
                    lruCache.put(key, value);
                    System.out.println("put(" + key + ", " + value + ")");
                    break;
                case "get":
                    key = Integer.parseInt(parts[1]);
                    int result = lruCache.get(key);
                    System.out.println("get(" + key + ") = " + result);
                    break;
                default:
                    System.out.println("Invalid command");
            }
        }
        bufferedReader.close();
    }
}
