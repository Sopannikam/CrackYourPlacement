import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;

class Solution {
    public int mctFromLeafValues(int[] arr) {
        int n = arr.length;
        int[][] dp = new int[n][n];
        for (int[] row : dp) Arrays.fill(row, Integer.MAX_VALUE);

        int[][] max = new int[n][n];
        for (int i = 0; i < n; i++) {
            int currentMax = arr[i];
            for (int j = i; j < n; j++) {
                currentMax = Math.max(currentMax, arr[j]);
                max[i][j] = currentMax;
            }
        }

        for (int length = 1; length <= n; length++) {
            for (int i = 0; i <= n - length; i++) {
                int j = i + length - 1;
                if (i == j) {
                    dp[i][j] = 0;
                } else {
                    for (int k = i; k < j; k++) {
                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k + 1][j] + max[i][k] * max[k + 1][j]);
                    }
                }
            }
        }

        return dp[0][n - 1];
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        
        System.out.println("Enter the number of elements in the array:");
        int n = Integer.parseInt(bufferedReader.readLine().trim());
        
        int[] arr = new int[n];
        System.out.println("Enter the elements of the array:");
        String[] arrStr = bufferedReader.readLine().trim().split("\\s+");
        
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(arrStr[i]);
        }

        Solution solution = new Solution();
        int result = solution.mctFromLeafValues(arr);

        System.out.println("The smallest possible sum of the values of each non-leaf node is: " + result);
        
        bufferedReader.close();
    }
}
