
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

public class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        if (root == null) {
            return 0;
        }
        
        int sum = 0;
        
        // If the current node's value is within the range, add it to the sum
        if (root.val >= low && root.val <= high) {
            sum += root.val;
        }
        
        // If the current node's value is greater than low, its left subtree may have nodes in range
        if (root.val > low) {
            sum += rangeSumBST(root.left, low, high);
        }
        
        // If the current node's value is less than high, its right subtree may have nodes in range
        if (root.val < high) {
            sum += rangeSumBST(root.right, low, high);
        }
        
        return sum;
    }
    
    public static void main(String[] args) {
        // Example 1
        TreeNode root1 = new TreeNode(10);
        root1.left = new TreeNode(5);
        root1.right = new TreeNode(15);
        root1.left.left = new TreeNode(3);
        root1.left.right = new TreeNode(7);
        root1.right.right = new TreeNode(18);
        int low1 = 7, high1 = 15;
        
        Solution sol = new Solution();
        System.out.println(sol.rangeSumBST(root1, low1, high1)); // Output: 32

        // Example 2
        TreeNode root2 = new TreeNode(10);
        root2.left = new TreeNode(5);
        root2.right = new TreeNode(15);
        root2.left.left = new TreeNode(3);
        root2.left.right = new TreeNode(7);
        root2.right.left = new TreeNode(13);
        root2.right.right = new TreeNode(18);
        root2.left.left.left = new TreeNode(1);
        root2.left.right.left = new TreeNode(6);
        int low2 = 6, high2 = 10;
        
        System.out.println(sol.rangeSumBST(root2, low2, high2)); // Output: 23
    }
}
