import java.util.*;

class Solution {
    private int n;
    private int[][] grid;
    private Queue<int[]> queue;
    private boolean[][] visited;
    private int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    
    public int shortestBridge(int[][] grid) {
        this.n = grid.length;
        this.grid = grid;
        this.queue = new LinkedList<>();
        this.visited = new boolean[n][n];
        
        // Step 1: Find the first island and mark it using DFS
        boolean found = false;
        for (int i = 0; i < n; i++) {
            if (found) break;
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    dfs(i, j);
                    found = true;
                    break;
                }
            }
        }
        
        // Step 2: Use BFS to find the shortest path to the second island
        int steps = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] point = queue.poll();
                for (int[] direction : directions) {
                    int x = point[0] + direction[0];
                    int y = point[1] + direction[1];
                    if (x >= 0 && x < n && y >= 0 && y < n && !visited[x][y]) {
                        if (grid[x][y] == 1) {
                            return steps;
                        }
                        queue.add(new int[]{x, y});
                        visited[x][y] = true;
                    }
                }
            }
            steps++;
        }
        
        return -1; 
    }
    
    private void dfs(int i, int j) {
        if (i < 0 || i >= n || j < 0 || j >= n || visited[i][j] || grid[i][j] == 0) {
            return;
        }
        visited[i][j] = true;
        queue.add(new int[]{i, j});
        for (int[] direction : directions) {
            dfs(i + direction[0], j + direction[1]);
        }
    }
}
