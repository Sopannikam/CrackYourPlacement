class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int val) { this.val = val; }
}

class Solution {
    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
        return construct(preorder, 0, preorder.length - 1, postorder, 0, postorder.length - 1);
    }

    private TreeNode construct(int[] preorder, int preStart, int preEnd, int[] postorder, int postStart, int postEnd) {
        if (preStart > preEnd || postStart > postEnd) {
            return null;
        }

        TreeNode root = new TreeNode(preorder[preStart]);
        if (preStart == preEnd) {
            return root;
        }

        // Find the root of the left subtree in postorder array
        int leftRootVal = preorder[preStart + 1];
        int leftRootIndex = postStart;
        while (postorder[leftRootIndex] != leftRootVal) {
            leftRootIndex++;
        }

        int leftSubtreeSize = leftRootIndex - postStart + 1;

        root.left = construct(preorder, preStart + 1, preStart + leftSubtreeSize, postorder, postStart, leftRootIndex);
        root.right = construct(preorder, preStart + leftSubtreeSize + 1, preEnd, postorder, leftRootIndex + 1, postEnd - 1);

        return root;
    }
}
