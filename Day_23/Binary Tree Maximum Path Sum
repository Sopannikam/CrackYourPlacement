
class Solution {
    private int maxSum;

    public int maxPathSum(TreeNode root) {
        maxSum = Integer.MIN_VALUE;
        maxGain(root);
        return maxSum;
    }

    private int maxGain(TreeNode node) {
        if (node == null) {
            return 0;
        }

        // Recursive call on left and right children
        int leftGain = Math.max(maxGain(node.left), 0);
        int rightGain = Math.max(maxGain(node.right), 0);

        // The price of the current path
        int priceNewPath = node.val + leftGain + rightGain;

        // Update the maxSum if the priceNewPath is larger
        maxSum = Math.max(maxSum, priceNewPath);

        // Return the maximum gain the current node contributes
        return node.val + Math.max(leftGain, rightGain);
    }
}
