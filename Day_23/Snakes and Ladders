import java.util.*;

public class Solution {
    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        int[] flatBoard = new int[n * n];
        boolean isLeftToRight = true;
        int index = 0;
        
        // Step 1: Flatten the board
        for (int i = n - 1; i >= 0; i--) {
            if (isLeftToRight) {
                for (int j = 0; j < n; j++) {
                    flatBoard[index++] = board[i][j];
                }
            } else {
                for (int j = n - 1; j >= 0; j--) {
                    flatBoard[index++] = board[i][j];
                }
            }
            isLeftToRight = !isLeftToRight;
        }

        // Step 2: BFS initialization
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[n * n];
        queue.offer(0);
        visited[0] = true;
        int moves = 0;

        // Step 3: BFS loop
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int current = queue.poll();
                if (current == n * n - 1) {
                    return moves;
                }
                for (int dice = 1; dice <= 6; dice++) {
                    int next = current + dice;
                    if (next >= n * n) break;
                    int destination = flatBoard[next] == -1 ? next : flatBoard[next] - 1;
                    if (!visited[destination]) {
                        visited[destination] = true;
                        queue.offer(destination);
                    }
                }
            }
            moves++;
        }

        return -1; // If the queue is empty and we haven't reached the last square
    }
}
