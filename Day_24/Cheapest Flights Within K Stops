import java.util.*;

class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        // Create the adjacency list
        Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int[] flight : flights) {
            graph.computeIfAbsent(flight[0], x -> new ArrayList<>()).add(new int[]{flight[1], flight[2]});
        }

        // Priority queue to store (cost, current_city, stops_remaining)
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        pq.offer(new int[]{0, src, k + 1});
        
        // Track the minimum cost to reach each city with a certain number of stops
        Map<Integer, Integer> minCost = new HashMap<>();
        
        while (!pq.isEmpty()) {
            int[] current = pq.poll();
            int cost = current[0], city = current[1], stops = current[2];
            
            // If we reached the destination, return the cost
            if (city == dst) {
                return cost;
            }
            
            // If we have stops remaining, explore the neighbors
            if (stops > 0) {
                for (int[] neighbor : graph.getOrDefault(city, new ArrayList<>())) {
                    int nextCity = neighbor[0];
                    int nextCost = neighbor[1];
                    
                    int newCost = cost + nextCost;
                    // If this path to the next city with remaining stops is cheaper, continue
                    if (newCost < minCost.getOrDefault(nextCity * 1000 + stops - 1, Integer.MAX_VALUE)) {
                        pq.offer(new int[]{newCost, nextCity, stops - 1});
                        minCost.put(nextCity * 1000 + stops - 1, newCost);
                    }
                }
            }
        }
        
        return -1;
    }
}
