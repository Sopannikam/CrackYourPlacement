import java.util.ArrayList;
import java.util.List;

class Solution {
    private int[] answer, count;
    private List<List<Integer>> tree;
    
    public int[] sumOfDistancesInTree(int n, int[][] edges) {
        tree = new ArrayList<>();
        answer = new int[n];
        count = new int[n];
        
        for (int i = 0; i < n; ++i) {
            tree.add(new ArrayList<>());
        }
        
        for (int[] edge : edges) {
            tree.get(edge[0]).add(edge[1]);
            tree.get(edge[1]).add(edge[0]);
        }
        
        dfs(0, -1);
        dfs2(0, -1);
        
        return answer;
    }
    
    private void dfs(int node, int parent) {
        for (int child : tree.get(node)) {
            if (child != parent) {
                dfs(child, node);
                count[node] += count[child];
                answer[node] += answer[child] + count[child];
            }
        }
        count[node]++;
    }
    
    private void dfs2(int node, int parent) {
        for (int child : tree.get(node)) {
            if (child != parent) {
                answer[child] = answer[node] - count[child] + count.length - count[child];
                dfs2(child, node);
            }
        }
    }
}
