import java.util.*;

class Solution {
    private int time = 0;

    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer>[] graph = new ArrayList[n];
        int[] disc = new int[n]; 
        int[] low = new int[n]; 
        Arrays.fill(disc, -1); 

        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }

        // Build the graph
        for (List<Integer> conn : connections) {
            int u = conn.get(0);
            int v = conn.get(1);
            graph[u].add(v);
            graph[v].add(u);
        }

        // Run DFS from the first node
        dfs(0, -1, disc, low, graph, result);

        return result;
    }

    private void dfs(int u, int parent, int[] disc, int[] low, List<Integer>[] graph, List<List<Integer>> result) {
        disc[u] = low[u] = ++time; 
        for (int v : graph[u]) {
            if (v == parent) continue; 

            if (disc[v] == -1) { 
                dfs(v, u, disc, low, graph, result);
                low[u] = Math.min(low[u], low[v]); 

               
                if (low[v] > disc[u]) {
                    result.add(Arrays.asList(u, v));
                }
            } else {
                // Update the low time of u if v is already visited
                low[u] = Math.min(low[u], disc[v]);
            }
        }
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        List<List<Integer>> connections1 = new ArrayList<>();
        connections1.add(Arrays.asList(0, 1));
        connections1.add(Arrays.asList(1, 2));
        connections1.add(Arrays.asList(2, 0));
        connections1.add(Arrays.asList(1, 3));
        System.out.println(sol.criticalConnections(4, connections1)); 

        List<List<Integer>> connections2 = new ArrayList<>();
        connections2.add(Arrays.asList(0, 1));
        System.out.println(sol.criticalConnections(2, connections2)); 
    }
}
