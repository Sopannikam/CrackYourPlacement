public class Solution {
    public int removeBoxes(int[] boxes) {
        int n = boxes.length;
        int[][][] dp = new int[n][n][n];

        return helper(boxes, 0, n - 1, 0, dp);
    }

    private int helper(int[] boxes, int i, int j, int k, int[][][] dp) {
        if (i > j) return 0;
        if (dp[i][j][k] != 0) return dp[i][j][k];

        // Increase k while the next box has the same color
        while (i + 1 <= j && boxes[i + 1] == boxes[i]) {
            i++;
            k++;
        }

        // Case 1: Remove boxes[i] with k identical consecutive boxes
        int result = (k + 1) * (k + 1) + helper(boxes, i + 1, j, 0, dp);

        // Case 2: Try to merge non-contiguous boxes of the same color to maximize the score
        for (int m = i + 1; m <= j; m++) {
            if (boxes[m] == boxes[i]) {
                result = Math.max(result, helper(boxes, i + 1, m - 1, 0, dp) + helper(boxes, m, j, k + 1, dp));
            }
        }

        dp[i][j][k] = result;
        return result;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] boxes1 = {1, 3, 2, 2, 2, 3, 4, 3, 1};
        System.out.println(sol.removeBoxes(boxes1)); 

        int[] boxes2 = {1, 1, 1};
        System.out.println(sol.removeBoxes(boxes2)); 

        int[] boxes3 = {1};
        System.out.println(sol.removeBoxes(boxes3));
    }
}
