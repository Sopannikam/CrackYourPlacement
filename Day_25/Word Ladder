import java.util.*;

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet = new HashSet<>(wordList);
        if (!wordSet.contains(endWord)) {
            return 0; // If the endWord is not in the word list, no transformation is possible.
        }

        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        int level = 1;

        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            for (int i = 0; i < levelSize; i++) {
                String currentWord = queue.poll();
                char[] currentWordArray = currentWord.toCharArray();

                for (int j = 0; j < currentWordArray.length; j++) {
                    char originalChar = currentWordArray[j];
                    for (char c = 'a'; c <= 'z'; c++) {
                        currentWordArray[j] = c;
                        String nextWord = new String(currentWordArray);

                        if (nextWord.equals(endWord)) {
                            return level + 1;
                        }

                        if (wordSet.contains(nextWord)) {
                            queue.offer(nextWord);
                            wordSet.remove(nextWord); // Remove to prevent re-visiting.
                        }
                    }
                    currentWordArray[j] = originalChar; // Restore original character.
                }
            }
            level++;
        }

        return 0; // If no transformation sequence found, return 0.
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        List<String> wordList1 = Arrays.asList("hot", "dot", "dog", "lot", "log", "cog");
        System.out.println(sol.ladderLength("hit", "cog", wordList1)); 

        List<String> wordList2 = Arrays.asList("hot", "dot", "dog", "lot", "log");
        System.out.println(sol.ladderLength("hit", "cog", wordList2)); 
    }
}
