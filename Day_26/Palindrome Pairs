import java.util.*;

class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> res = new ArrayList<>();
        TrieNode root = new TrieNode();
        
        // Build the trie with reversed words
        for (int i = 0; i < words.length; i++) {
            addWord(root, words[i], i);
        }

        // Search for palindrome pairs
        for (int i = 0; i < words.length; i++) {
            search(words, i, root, res);
        }
        
        return res;
    }
    
    private void addWord(TrieNode root, String word, int index) {
        TrieNode node = root;
        for (int i = word.length() - 1; i >= 0; i--) {
            if (isPalindrome(word, 0, i)) {
                node.palindromePrefixRemaining.add(index);
            }
            char c = word.charAt(i);
            node = node.children.computeIfAbsent(c, k -> new TrieNode());
        }
        node.index = index;
        node.palindromePrefixRemaining.add(index); // Entire word is a palindrome
    }

    private void search(String[] words, int i, TrieNode node, List<List<Integer>> res) {
        String word = words[i];
        for (int j = 0; j < word.length(); j++) {
            if (node.index >= 0 && node.index != i && isPalindrome(word, j, word.length() - 1)) {
                res.add(Arrays.asList(i, node.index));
            }
            node = node.children.get(word.charAt(j));
            if (node == null) return;
        }
        
        for (int j : node.palindromePrefixRemaining) {
            if (i != j) {
                res.add(Arrays.asList(i, j));
            }
        }
    }
    
    private boolean isPalindrome(String word, int left, int right) {
        while (left < right) {
            if (word.charAt(left++) != word.charAt(right--)) return false;
        }
        return true;
    }

    class TrieNode {
        Map<Character, TrieNode> children = new HashMap<>();
        int index = -1; // Store the index of the word in the list
        List<Integer> palindromePrefixRemaining = new ArrayList<>();
    }
}
