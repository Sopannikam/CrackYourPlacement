import java.util.Stack;

class Solution {
    public int[] mostCompetitive(int[] nums, int k) {
        Stack<Integer> stack = new Stack<>();
        int n = nums.length;

        for (int i = 0; i < n; i++) {
            // While stack is not empty, and the top element of the stack is greater than
            // the current element, and we can still discard elements to form a subsequence of size k
            while (!stack.isEmpty() && stack.peek() > nums[i] && stack.size() + n - i - 1 >= k) {
                stack.pop();
            }

            // If stack has less than k elements, we can push the current element
            if (stack.size() < k) {
                stack.push(nums[i]);
            }
        }

        // Convert the stack to an array
        int[] result = new int[k];
        for (int i = k - 1; i >= 0; i--) {
            result[i] = stack.pop();
        }

        return result;
    }
}
