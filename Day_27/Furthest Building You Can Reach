import java.util.PriorityQueue;

class Solution {
    public int furthestBuilding(int[] heights, int bricks, int ladders) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        for (int i = 0; i < heights.length - 1; i++) {
            int diff = heights[i + 1] - heights[i];
            
            // Only consider positive differences (when the next building is taller)
            if (diff > 0) {
                minHeap.add(diff);
                
                // If we've used more ladders than we have available, start using bricks
                if (minHeap.size() > ladders) {
                    bricks -= minHeap.poll(); // Use bricks for the smallest difference
                    
                    // If we run out of bricks, we can't move further
                    if (bricks < 0) {
                        return i;
                    }
                }
            }
        }
        
        // If we successfully processed all buildings, return the last index
        return heights.length - 1;
    }
}
