class Solution {
    public int knightDialer(int n) {
        int MOD = 1000000007;
        
        // Knight moves mapped to each digit
        int[][] moves = {
            {4, 6},    // 0
            {6, 8},    // 1
            {7, 9},    // 2
            {4, 8},    // 3
            {3, 9, 0}, // 4
            {},        // 5 (no moves)
            {1, 7, 0}, // 6
            {2, 6},    // 7
            {1, 3},    // 8
            {2, 4}     // 9
        };
        
        // DP array
        int[][] dp = new int[n][10];
        
        // Initialize dp[0][j] = 1 (first move)
        for (int j = 0; j <= 9; j++) {
            dp[0][j] = 1;
        }
        
        // Fill dp array for all moves from 1 to n-1
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= 9; j++) {
                dp[i][j] = 0;
                for (int move : moves[j]) {
                    dp[i][j] = (dp[i][j] + dp[i-1][move]) % MOD;
                }
            }
        }
        
        // Sum up all possible numbers of length n
        int result = 0;
        for (int j = 0; j <= 9; j++) {
            result = (result + dp[n-1][j]) % MOD;
        }
        
        return result;
    }
}
