import java.util.PriorityQueue;
import java.util.Arrays;

class Solution {
    public double mincostToHireWorkers(int[] quality, int[] wage, int k) {
        int n = quality.length;
        Worker[] workers = new Worker[n];
        
        // Populate the workers array with Worker objects
        for (int i = 0; i < n; i++) {
            workers[i] = new Worker(quality[i], wage[i]);
        }
        
        // Sort the workers array by the ratio (wage[i] / quality[i])
        Arrays.sort(workers, (a, b) -> Double.compare(a.ratio, b.ratio));
        
        // Max heap to keep track of the largest qualities in the group
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
        
        double minCost = Double.MAX_VALUE;
        int sumQuality = 0;
        
        // Iterate over the sorted workers array
        for (Worker worker : workers) {
            // Add the current worker's quality to the max heap
            maxHeap.offer(worker.quality);
            sumQuality += worker.quality;
            
            // If heap size exceeds k, remove the worker with the highest quality
            if (maxHeap.size() > k) {
                sumQuality -= maxHeap.poll();
            }
            
            // If we have exactly k workers, calculate the total wage for this group
            if (maxHeap.size() == k) {
                double cost = sumQuality * worker.ratio;
                minCost = Math.min(minCost, cost);
            }
        }
        
        return minCost;
    }
    
    // Helper class to store worker data
    class Worker {
        int quality;
        double ratio; 
        
        Worker(int quality, int wage) {
            this.quality = quality;
            this.ratio = (double) wage / quality;
        }
    }
}
