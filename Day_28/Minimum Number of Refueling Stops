import java.util.PriorityQueue;

class Solution {
    public int minRefuelStops(int target, int startFuel, int[][] stations) {
        // Max heap to keep track of the fuel amounts from the stations
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
        
        int fuel = startFuel;
        int stops = 0;
        int prevPosition = 0;
        
        for (int[] station : stations) {
            int position = station[0];
            int stationFuel = station[1];
            
            // While we cannot reach the current station
            while (fuel < position) {
                if (maxHeap.isEmpty()) {
                    return -1; 
                }
                fuel += maxHeap.poll(); // Refuel with the largest available fuel amount
                stops++; 
            }
            
            // Now we can reach this station, add its fuel to the heap
            maxHeap.offer(stationFuel);
        }
        
        // Finally, check if we can reach the target
        while (fuel < target) {
            if (maxHeap.isEmpty()) {
                return -1; 
            }
            fuel += maxHeap.poll();
            stops++;
        }
        
        return stops;
    }
}
