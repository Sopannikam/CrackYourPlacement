import java.util.PriorityQueue;
import java.util.Arrays;

class Solution {
    public int swimInWater(int[][] grid) {
        int n = grid.length;
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        boolean[][] visited = new boolean[n][n];
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        
        // Start at the top-left corner with the initial elevation
        minHeap.offer(new int[]{grid[0][0], 0, 0});
        visited[0][0] = true;
        
        while (!minHeap.isEmpty()) {
            int[] current = minHeap.poll();
            int elevation = current[0], x = current[1], y = current[2];
            
            // If we reach the bottom-right corner, return the elevation (time) at this point
            if (x == n - 1 && y == n - 1) {
                return elevation;
            }
            
            // Explore the four possible directions
            for (int[] dir : directions) {
                int newX = x + dir[0], newY = y + dir[1];
                
                if (newX >= 0 && newX < n && newY >= 0 && newY < n && !visited[newX][newY]) {
                    visited[newX][newY] = true;
                    minHeap.offer(new int[]{Math.max(elevation, grid[newX][newY]), newX, newY});
                }
            }
        }
        
        return -1; 
    }
}
