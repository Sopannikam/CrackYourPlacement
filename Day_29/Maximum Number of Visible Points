import java.util.*;

class Solution {
    public int visiblePoints(List<List<Integer>> points, int angle, List<Integer> location) {
        int x = location.get(0);
        int y = location.get(1);
        
        int countSameLocation = 0;
        List<Double> angles = new ArrayList<>();
        
        for (List<Integer> point : points) {
            int px = point.get(0);
            int py = point.get(1);
            
            if (px == x && py == y) {
                countSameLocation++;
            } else {
                double angleToPoint = Math.toDegrees(Math.atan2(py - y, px - x));
                if (angleToPoint < 0) {
                    angleToPoint += 360; // Normalize the angle to [0, 360)
                }
                angles.add(angleToPoint);
            }
        }
        
        Collections.sort(angles);
        int n = angles.size();
        
        // Duplicate the angle array by adding 360 degrees to each original angle
        for (int i = 0; i < n; i++) {
            angles.add(angles.get(i) + 360);
        }
        
        int maxVisible = 0;
        int j = 0;
        
        for (int i = 0; i < n; i++) {
            // Move the window's right end as far as possible without exceeding the angle
            while (j < 2 * n && angles.get(j) <= angles.get(i) + angle) {
                j++;
            }
            maxVisible = Math.max(maxVisible, j - i);
        }
        
        return maxVisible + countSameLocation;
    }
}
