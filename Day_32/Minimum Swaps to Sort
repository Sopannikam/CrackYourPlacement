
class Solution {
    // Function to find the minimum number of swaps required to sort the array.
    public int minSwaps(int nums[]) {
        int n = nums.length;

        // Create an array of pairs where each pair is (element, index).
        Pair[] arrPos = new Pair[n];
        for (int i = 0; i < n; i++) {
            arrPos[i] = new Pair(nums[i], i);
        }

        // Sort the array of pairs based on the element value.
        Arrays.sort(arrPos, new Comparator<Pair>() {
            @Override
            public int compare(Pair p1, Pair p2) {
                return Integer.compare(p1.value, p2.value);
            }
        });

        // To keep track of visited elements.
        boolean[] visited = new boolean[n];
        Arrays.fill(visited, false);

        // Initialize the number of swaps needed.
        int swaps = 0;

        // Traverse the array elements.
        for (int i = 0; i < n; i++) {
            // If already visited or already in the correct position, continue.
            if (visited[i] || arrPos[i].index == i) {
                continue;
            }

            // Calculate the size of the cycle.
            int cycleSize = 0;
            int j = i;
            while (!visited[j]) {
                visited[j] = true;
                j = arrPos[j].index;
                cycleSize++;
            }

            // If there's a cycle of size k, we need k-1 swaps to sort it.
            if (cycleSize > 1) {
                swaps += (cycleSize - 1);
            }
        }

        // Return the total number of swaps required.
        return swaps;
    }

    // Helper class to store pairs of (value, index).
    class Pair {
        int value;
        int index;

        Pair(int value, int index) {
            this.value = value;
            this.index = index;
        }
    }
}
