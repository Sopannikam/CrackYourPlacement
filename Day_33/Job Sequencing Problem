
class Solution {
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n) {
        // Sort jobs in descending order of profit
        Arrays.sort(arr, new Comparator<Job>() {
            public int compare(Job j1, Job j2) {
                return j2.profit - j1.profit;
            }
        });
        
        // Find the maximum deadline
        int maxDeadline = 0;
        for (Job job : arr) {
            if (job.deadline > maxDeadline) {
                maxDeadline = job.deadline;
            }
        }
        
        // Initialize slot availability array
        boolean[] slots = new boolean[maxDeadline];
        
        int jobCount = 0;
        int totalProfit = 0;
        
        // Iterate over jobs
        for (Job job : arr) {
            // Find a slot for this job
            for (int j = Math.min(maxDeadline, job.deadline) - 1; j >= 0; j--) {
                if (!slots[j]) {
                    slots[j] = true;
                    jobCount++;
                    totalProfit += job.profit;
                    break;
                }
            }
        }
        
        return new int[] { jobCount, totalProfit };
    }
}

