class Solution
{
    // Function to find the maximum number of cuts.
    public int maximizeCuts(int n, int x, int y, int z)
    {
        // DP array to store the maximum number of segments for each length.
        int[] dp = new int[n + 1];
        
        // Initialize dp[0] to 0 (base case)
        dp[0] = 0;
        
        // Fill the dp array for each length from 1 to n
        for (int i = 1; i <= n; i++) {
            dp[i] = -1;  // Initialize with -1 (meaning no cuts possible)
            
            if (i >= x && dp[i - x] != -1) {
                dp[i] = Math.max(dp[i], dp[i - x] + 1);
            }
            if (i >= y && dp[i - y] != -1) {
                dp[i] = Math.max(dp[i], dp[i - y] + 1);
            }
            if (i >= z && dp[i - z] != -1) {
                dp[i] = Math.max(dp[i], dp[i - z] + 1);
            }
        }
        
        // If dp[n] is negative, that means no valid cuts were possible, so return 0.
        return dp[n] < 0 ? 0 : dp[n];
    }
}
