class Solution {
    public int mergeStones(int[] stones, int k) {
        int n = stones.length;
        
        // If it's not possible to merge into one pile
        if ((n - 1) % (k - 1) != 0) {
            return -1;
        }
        
        // Prefix sum array to quickly get the sum of any subarray
        int[] prefixSum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefixSum[i + 1] = prefixSum[i] + stones[i];
        }
        
        // DP table to store the minimum cost to merge stones[i...j]
        int[][] dp = new int[n][n];
        for (int len = k; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                dp[i][j] = Integer.MAX_VALUE;
                
                // Check all possible splits
                for (int m = i; m < j; m += (k - 1)) {
                    if (dp[i][m] != Integer.MAX_VALUE && dp[m + 1][j] != Integer.MAX_VALUE) {
                        dp[i][j] = Math.min(dp[i][j], dp[i][m] + dp[m + 1][j]);
                    }
                }
                
                // If the whole segment can be merged into one pile
                if ((len - 1) % (k - 1) == 0) {
                    dp[i][j] += prefixSum[j + 1] - prefixSum[i];
                }
            }
        }
        
        return dp[0][n - 1];
    }
}
