
class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        
        // Loop through all vertices to cover disconnected components
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (dfsCycleCheck(i, -1, visited, adj)) {
                    return true; // Cycle detected
                }
            }
        }
        return false; // No cycle detected
    }
    
    // Helper function to perform DFS and check for cycles
    private boolean dfsCycleCheck(int current, int parent, boolean[] visited, ArrayList<ArrayList<Integer>> adj) {
        visited[current] = true;
        
        // Traverse all adjacent vertices
        for (int neighbor : adj.get(current)) {
            if (!visited[neighbor]) {
                // If the neighbor is not visited, recursively visit it
                if (dfsCycleCheck(neighbor, current, visited, adj)) {
                    return true;
                }
            } else if (neighbor != parent) {
                // If visited and not parent, cycle is found
                return true;
            }
        }
        return false;
    }
}
