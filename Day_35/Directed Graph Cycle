
class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        boolean[] recStack = new boolean[V];
        
        // Check for cycle in different DFS trees
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (dfsCycleCheck(i, visited, recStack, adj)) {
                    return true; // Cycle detected
                }
            }
        }
        return false; // No cycle detected
    }
    
    // Helper function to perform DFS and check for cycles
    private boolean dfsCycleCheck(int current, boolean[] visited, boolean[] recStack, ArrayList<ArrayList<Integer>> adj) {
        visited[current] = true;
        recStack[current] = true;
        
        // Traverse all adjacent vertices
        for (int neighbor : adj.get(current)) {
            if (!visited[neighbor]) {
                // If the neighbor is not visited, recursively visit it
                if (dfsCycleCheck(neighbor, visited, recStack, adj)) {
                    return true;
                }
            } else if (recStack[neighbor]) {
                // If visited and in recStack, cycle is found
                return true;
            }
        }
        
        // Remove the vertex from recursion stack
        recStack[current] = false;
        return false;
    }
}
