
class Solution {
    // Function to find number of strongly connected components in the graph.
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj) {
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[V];
        
        // Step 1: Perform DFS and push vertices to stack by finish time
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                dfs(i, adj, visited, stack);
            }
        }
        
        // Step 2: Transpose the graph
        ArrayList<ArrayList<Integer>> transposedGraph = transposeGraph(V, adj);
        
        // Step 3: Perform DFS on the transposed graph in the order of stack
        Arrays.fill(visited, false);
        int sccCount = 0;
        
        while (!stack.isEmpty()) {
            int node = stack.pop();
            if (!visited[node]) {
                dfsTranspose(node, transposedGraph, visited);
                sccCount++;
            }
        }
        
        return sccCount;
    }
    
    private void dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean[] visited, Stack<Integer> stack) {
        visited[node] = true;
        for (int neighbor : adj.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, adj, visited, stack);
            }
        }
        stack.push(node); // Push to stack after finishing the node
    }
    
    private ArrayList<ArrayList<Integer>> transposeGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<ArrayList<Integer>> transposed = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            transposed.add(new ArrayList<>());
        }
        
        for (int i = 0; i < V; i++) {
            for (int neighbor : adj.get(i)) {
                transposed.get(neighbor).add(i); // Reverse the edge
            }
        }
        
        return transposed;
    }
    
    private void dfsTranspose(int node, ArrayList<ArrayList<Integer>> transposed, boolean[] visited) {
        visited[node] = true;
        for (int neighbor : transposed.get(node)) {
            if (!visited[neighbor]) {
                dfsTranspose(neighbor, transposed, visited);
            }
        }
    }
}
