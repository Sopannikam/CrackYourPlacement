

class Solution {
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>> adj) {
        int[] color = new int[V]; 
        Arrays.fill(color, -1);   
        
        // Check each component of the graph
        for (int i = 0; i < V; i++) {
            if (color[i] == -1) { 
                if (!bfsCheck(adj, i, color)) {
                    return false; 
                }
            }
        }
        
        return true; 
    }
    
    private boolean bfsCheck(ArrayList<ArrayList<Integer>> adj, int start, int[] color) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(start);
        color[start] = 0; // Start coloring the first vertex with color 0
        
        while (!queue.isEmpty()) {
            int node = queue.poll();
            
            // Traverse all adjacent vertices
            for (int neighbor : adj.get(node)) {
                if (color[neighbor] == -1) { 
                    color[neighbor] = 1 - color[node]; 
                    queue.add(neighbor);
                } else if (color[neighbor] == color[node]) { 
                    return false; 
                }
            }
        }
        
        return true; 
    }
}
