
class Solution {
    public static void findPreSuc(Node root, Node[] pre, Node[] suc, int key) {
        // Initialize predecessor and successor as null
        pre[0] = null;
        suc[0] = null;
        
        // Find predecessor and successor
        findPreSucHelper(root, pre, suc, key);
    }
    
    private static void findPreSucHelper(Node root, Node[] pre, Node[] suc, int key) {
        if (root == null) return;
        
        if (root.data == key) {
            // For predecessor, check the left subtree
            if (root.left != null) {
                Node temp = root.left;
                while (temp.right != null) {
                    temp = temp.right;
                }
                pre[0] = temp;
            }
            
            // For successor, check the right subtree
            if (root.right != null) {
                Node temp = root.right;
                while (temp.left != null) {
                    temp = temp.left;
                }
                suc[0] = temp;
            }
            return;
        }
        
        if (root.data > key) {
            // Current root can be successor, move to the left subtree
            suc[0] = root;
            findPreSucHelper(root.left, pre, suc, key);
        } else {
            // Current root can be predecessor, move to the right subtree
            pre[0] = root;
            findPreSucHelper(root.right, pre, suc, key);
        }
    }
}
