

class Solution {
    // Function to return list containing vertices in Topological order.
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) {
        int[] inDegree = new int[V];
        int[] topoOrder = new int[V];
        
        // Calculate in-degree of each vertex
        for (int i = 0; i < V; i++) {
            for (int neighbor : adj.get(i)) {
                inDegree[neighbor]++;
            }
        }
        
        // Queue to store vertices with in-degree 0
        Queue<Integer> queue = new LinkedList<>();
        
        // Add vertices with in-degree 0 to the queue
        for (int i = 0; i < V; i++) {
            if (inDegree[i] == 0) {
                queue.add(i);
            }
        }
        
        int index = 0;
        
        // Process vertices
        while (!queue.isEmpty()) {
            int currVertex = queue.poll();
            topoOrder[index++] = currVertex;
            
            // Reduce the in-degree of neighboring vertices
            for (int neighbor : adj.get(currVertex)) {
                inDegree[neighbor]--;
                // If in-degree becomes 0, add it to the queue
                if (inDegree[neighbor] == 0) {
                    queue.add(neighbor);
                }
            }
        }
        
        // If all vertices are included in the topological sort, return the order
        if (index == V) {
            return topoOrder;
        } else {
            return new int[0]; 
        }
    }
}
