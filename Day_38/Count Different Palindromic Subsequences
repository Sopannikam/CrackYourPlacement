class Solution {
    int mod = 1000000007;
    public int countPalindromicSubsequences(String s) {
        int n = s.length();
        
        // Store next occurence of every character in s and -1 if no next occurence
        int next[] = new int[n];
        
        // Store previous occurence of every character in s and -1 if no previous occurence
        int prev[] = new int[n];
        
        // Store current occurence of character in string
        HashMap<Character,Integer> map = new HashMap<>();
        for (int i=0;i<n;i++) {
            char ch = s.charAt(i);
            if (map.containsKey(ch)) {
                prev[i]=map.get(ch);
            }
            else {
                prev[i]=-1;
            }
            
            map.put(ch,i);
        }
        
        map.clear();
        for (int i=n-1;i>=0;i--) {
            char ch = s.charAt(i);
            if (map.containsKey(ch)) {
                next[i]=map.get(ch);
            }
            else {
                next[i]=-1;
            }
            
            map.put(ch,i);
        }
        
        // dp[i][j] stores the count of different palindromic subsequences
        // in the substring [i,j]
        int dp[][] = new int[n][n];
        
        // Diagonal elements are 1 as count of different palindromic subsequences
        // of length 1 is 1
        for (int i=0;i<n;i++) {
            dp[i][i] = 1;
        }
        
       
        for (int i=0;i<n-1;i++) {
            dp[i][i+1] = 2;
        }
        
        for (int g=2;g<n;g++) {
            for (int i=0,j=g;j<n;i++,j++) {
                
                int chi = s.charAt(i);
                int chj = s.charAt(j);
                
                if (chi!=chj) {
                    
                    dp[i][j] = dp[i][j-1] + dp[i+1][j] - dp[i+1][j-1];
                }
                
                else {
                    
                    int nxt = next[i]; 
                    int prv = prev[j]; 
                    
                   
                    
                    if (nxt>prv) {
                       
                        dp[i][j] = dp[i+1][j-1] + dp[i+1][j-1] + 2;
                    }
                    
                    else if (nxt==prv) {
                        
                        dp[i][j] = dp[i+1][j-1] + dp[i+1][j-1] + 1;
                    }
                    
                    else {
                        
                        dp[i][j] = dp[i+1][j-1] + dp[i+1][j-1] - dp[nxt+1][prv-1];
                    }
                }
                
                // Handle modulo
                if (dp[i][j]<0) {
                    dp[i][j] = dp[i][j]+mod;
                }
                else {
                    dp[i][j] = dp[i][j]%mod;
                }
            }
        }
        
        return dp[0][n-1];
    }
}
