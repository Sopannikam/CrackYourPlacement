import java.util.ArrayList;

class Node {
    int data;
    Node left, right;

    Node(int data) {
        this.data = data;
        left = right = null;
    }
}

public class KSumPaths {
    // Utility function to print the current path
    private static void printPath(ArrayList<Integer> path, int start) {
        for (int i = start; i < path.size(); i++) {
            System.out.print(path.get(i) + " ");
        }
        System.out.println();
    }

    // Recursive function to find k-sum paths
    private static void findKSumPaths(Node node, ArrayList<Integer> path, int k) {
        // Base case
        if (node == null) {
            return;
        }

        // Add the current node to the path
        path.add(node.data);

        // Check if there's any k-sum path in the current path
        int sum = 0;
        for (int i = path.size() - 1; i >= 0; i--) {
            sum += path.get(i);

            // If sum equals k, print the path
            if (sum == k) {
                printPath(path, i);
            }
        }

        // Recur for the left and right subtrees
        findKSumPaths(node.left, path, k);
        findKSumPaths(node.right, path, k);

        // Remove the current node from the path before returning
        path.remove(path.size() - 1);
    }

    // Function to find all k-sum paths in the binary tree
    public static void findKSumPaths(Node root, int k) {
        ArrayList<Integer> path = new ArrayList<>();
        findKSumPaths(root, path, k);
    }

    public static void main(String[] args) {
        Node root = new Node(1);
        root.left = new Node(3);
        root.right = new Node(-1);
        root.left.left = new Node(2);
        root.left.right = new Node(1);
        root.left.right.left = new Node(1);
        root.right.left = new Node(4);
        root.right.right = new Node(5);
        root.right.left.left = new Node(1);
        root.right.left.right = new Node(2);
        root.right.right.right = new Node(6);

        int k = 5;
        System.out.println("Paths with sum " + k + ":");
        findKSumPaths(root, k);
    }
}
