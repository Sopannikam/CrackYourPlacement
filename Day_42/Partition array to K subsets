
class Solution {
    public boolean isKPartitionPossible(int[] a, int n, int k) {
        if (k > n) return false;

        int sum = 0;
        for (int num : a) sum += num;

        if (sum % k != 0) return false;

        int targetSum = sum / k;
        boolean[] visited = new boolean[n];
        
        // Sort the array in descending order to optimize the search
        Arrays.sort(a);
        reverse(a);

        return canPartition(0, a, visited, k, 0, targetSum);
    }

    private boolean canPartition(int start, int[] a, boolean[] visited, int k, int currentSum, int targetSum) {
        if (k == 1) return true; // Last subset must have the required sum
        if (currentSum == targetSum) return canPartition(0, a, visited, k - 1, 0, targetSum);

        for (int i = start; i < a.length; i++) {
            if (!visited[i] && currentSum + a[i] <= targetSum) {
                visited[i] = true;

                if (canPartition(i + 1, a, visited, k, currentSum + a[i], targetSum)) {
                    return true;
                }

                // Backtrack
                visited[i] = false;
            }
        }

        return false;
    }

    private void reverse(int[] a) {
        int left = 0, right = a.length - 1;
        while (left < right) {
            int temp = a[left];
            a[left] = a[right];
            a[right] = temp;
            left++;
            right--;
        }
    }
}
