class Solution {
    private int rows, cols;
    private int emptySquares = 1; 
    private int pathCount = 0;
    private int[] start;
    
    public int uniquePathsIII(int[][] grid) {
        rows = grid.length;
        cols = grid[0].length;
        
        // Find the start point and count all empty squares
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (grid[r][c] == 1) {
                    start = new int[]{r, c};
                } else if (grid[r][c] == 0) {
                    emptySquares++;
                }
            }
        }
        
        // Start DFS from the start point
        dfs(grid, start[0], start[1], 0);
        
        return pathCount;
    }
    
    private void dfs(int[][] grid, int r, int c, int count) {
        // Base cases
        if (r < 0 || r >= rows || c < 0 || c >= cols || grid[r][c] == -1) {
            return;
        }
        if (grid[r][c] == 2) { // Reached the end
            if (count == emptySquares) {
                pathCount++;
            }
            return;
        }
        
        // Mark as visited
        grid[r][c] = -1;
        
        // Explore the four directions
        dfs(grid, r + 1, c, count + 1);
        dfs(grid, r - 1, c, count + 1);
        dfs(grid, r, c + 1, count + 1);
        dfs(grid, r, c - 1, count + 1);
        
        // Backtrack
        grid[r][c] = 0;
    }
}
