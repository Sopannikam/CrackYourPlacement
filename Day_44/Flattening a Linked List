
class Node {
    int data;
    Node next;
    Node bottom;

    Node(int x) {
        data = x;
        next = null;
        bottom = null;
    }

    // Function to print the linked list using bottom pointer
    public static void printList(Node node) {
        while (node != null) {
            System.out.print(node.data);
            if (node.bottom != null) {
                System.out.print("->");
            }
            node = node.bottom;
        }
        System.out.println();
    }
}

class Solution {
    // Function to merge two sorted linked lists
    private Node merge(Node a, Node b) {
        if (a == null) return b;
        if (b == null) return a;

        // Start with the linked list with the smaller value
        if (a.data < b.data) {
            a.bottom = merge(a.bottom, b);
            return a;
        } else {
            b.bottom = merge(a, b.bottom);
            return b;
        }
    }

    // Function to flatten the linked list
    public Node flatten(Node root) {
        if (root == null || root.next == null) {
            return root;
        }

        // Recursively flatten the next linked list
        root.next = flatten(root.next);

        // Merge the current list with the flattened list from next
        root = merge(root, root.next);

        // Return the flattened list
        return root;
    }
}
