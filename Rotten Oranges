

class Solution {
    // Direction vectors for moving in 4 directions (up, down, left, right)
    private static final int[] dRow = {-1, 1, 0, 0};
    private static final int[] dCol = {0, 0, -1, 1};
    
    // Function to find the minimum time required to rot all oranges.
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        int freshOranges = 0;
        
        // Step 1: Add all initially rotten oranges to the queue and count fresh oranges
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    queue.add(new int[]{i, j});
                } else if (grid[i][j] == 1) {
                    freshOranges++;
                }
            }
        }
        
        // If there are no fresh oranges, no time is needed
        if (freshOranges == 0) return 0;
        
        int minutes = 0;
        
        // Step 2: BFS to rot adjacent fresh oranges
        while (!queue.isEmpty()) {
            int size = queue.size();
            boolean anyRotten = false;
            
            for (int i = 0; i < size; i++) {
                int[] cell = queue.poll();
                int row = cell[0];
                int col = cell[1];
                
                // Check all 4 directions
                for (int d = 0; d < 4; d++) {
                    int newRow = row + dRow[d];
                    int newCol = col + dCol[d];
                    
                    // Check if the new cell is within bounds and is a fresh orange
                    if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < m && grid[newRow][newCol] == 1) {
                        // Rot this fresh orange
                        grid[newRow][newCol] = 2;
                        queue.add(new int[]{newRow, newCol});
                        freshOranges--;
                        anyRotten = true;
                    }
                }
            }
            
            // Increment time if at least one orange rotted this minute
            if (anyRotten) minutes++;
        }
        
        // If any fresh oranges are left, return -1
        return freshOranges == 0 ? minutes : -1;
    }
}
